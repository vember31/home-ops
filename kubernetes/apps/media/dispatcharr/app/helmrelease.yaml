---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name dispatcharr
  namespace: media

spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace

  test:
    enable: true

  rollback:
    recreate: true
    force: true
    cleanupOnFail: true

  uninstall:
    keepHistory: false
    
  maxHistory: 1

  values:

    controllers:
      ${APP}:
        enabled: true
        type: deployment
        annotations:
          reloader.stakater.com/auto: "true"
        replicas: 1

        initContainers:
          init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: 17
            envFrom: &envFrom
              - secretRef:
                  name: dispatcharr-secret

        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"

        containers:
          web:
            image:
              repository: ghcr.io/dispatcharr/dispatcharr
              tag: 0.7.1@sha256:596437b5a4f9d7ea605fc6349c24aa0060b69f3792c3fd1990386936ff11b9cb
              pullPolicy: IfNotPresent

            env: &env
              TZ: ${TIMEZONE}
              REDIS_HOST: redis-headless.database.svc.cluster.local
              CELERY_BROKER_URL: redis://redis-headless.database.svc.cluster.local:26379/0
              DISPATCHARR_LOG_LEVEL: info
            envFrom: *envFrom

            # resources:
            #   requests:
            #     cpu: 10m
            #   limits:
            #     memory: 500Mi

            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5

          celery:
            image:
              repository: ghcr.io/dispatcharr/dispatcharr
              tag: 0.7.1@sha256:596437b5a4f9d7ea605fc6349c24aa0060b69f3792c3fd1990386936ff11b9cb
              pullPolicy: IfNotPresent

            env: *env
            envFrom: *envFrom
            command: ["/bin/bash", "-c", "cd /app && celery -A dispatcharr worker -l info"]

            # resources:
            #   requests:
            #     cpu: 10m
            #   limits:
            #     memory: 500Mi
            
    service:
      web:
        controller: *name
        ports:
          http:
            port: 9191

    ingress:
      web:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: traefik.local.${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-with-errors@kubernetescrd
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: "IPTV & Stream Management"
          gethomepage.dev/group: Media
          gethomepage.dev/icon: https://raw.githubusercontent.com/Dispatcharr/Dispatcharr/refs/heads/main/frontend/src/images/logo.png
          gethomepage.dev/name: Dispatcharr
          gethomepage.dev/siteMonitor: http://${APP}.downloads.svc.cluster.local:9191

        hosts:
          - host: &host ${GATUS_SUBDOMAIN:-${APP}}.local.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: web
                  port: http

        tls: 
         - secretName: ${APP}-tls-production
           hosts:
             - *host      