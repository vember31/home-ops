---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name jellyfin
  namespace: media

spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace

  test:
    enable: true

  rollback:
    recreate: true
    force: true
    cleanupOnFail: true

  uninstall:
    keepHistory: false
    
  maxHistory: 1

  values:

    controllers:
      ${APP}:
        enabled: true
        type: deployment
        annotations: {}
        replicas: 1

        # Controller-specific overrides for `defaultPodOptions` keys
        pod:
          # keep media streaming off of nas, utility servers
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: node-role
                    operator: NotIn
                    values:
                      - nas
                      - utility

        containers:
          app:
            image:
              repository: linuxserver/jellyfin
              tag: 10.10.7@sha256:c9bdf96db6d206272a69edcfc54e771190dc8b4f6a6c2bb2e4d91f485824e470
              pullPolicy: IfNotPresent

            env:
              TZ: ${TIMEZONE}
              PUID: 1000
              PGID: 1000
              JELLYFIN_PublishedServerUrl: https://jellyfin.local.${SECRET_DOMAIN}

            resources:
              requests:
                cpu: 100m
              limits:
                memory: 2Gi

            probes:
              liveness: &probe
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &port 8096
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probe
              startup:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 30

    service:
      app:
        controller: *name
        ports:
          http:
            port: *port

    ingress:
      app:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: traefik.local.${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-with-errors@kubernetescrd
          hajimari.io/icon: simple-icons:jellyfin
          hajimari.io/info: &description Open-source Media Server
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: *description
          gethomepage.dev/group: Media
          gethomepage.dev/icon: jellyfin
          gethomepage.dev/name: Jellyfin
          gethomepage.dev/widget.type: ${APP}
          gethomepage.dev/widget.url: http://${APP}.media.svc.cluster.local:8096
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_JELLYFIN_TOKEN}}` }}"
        hosts:
          - host: &host ${APP}.local.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

        tls: 
         - secretName: ${APP}-tls-production
           hosts:
             - *host

    persistence:

      config:
        enabled: true
        suffix: config
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 10Gi
        retain: true
        globalMounts: []
      
      cache:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /config/cache

      # live tv recordings
      recordings:
        enabled: true
        type: nfs
        server: ${OMV_IP}
        path: /export/media/recordings
        globalMounts:
          - path: /media/recordings
            readOnly: false #allow jellyfin to record to this too