---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name requestrr
  namespace: media

spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace

  test:
    enable: true

  rollback:
    recreate: true
    force: true
    cleanupOnFail: true

  uninstall:
    keepHistory: false
    
  maxHistory: 1

  values:

    controllers:
      ${APP}:
        enabled: true
        type: deployment
        annotations: {}
        labels: {}
        replicas: 1

        containers:
          app:
            image:
              repository: thomst08/requestrr
              tag: v2.1.8@sha256:e1a46220133ae6a92ca3da749b882dcea14279600849cf4c41b4c7c140fde777
              pullPolicy: IfNotPresent

            lifecycle:
              postStart:
                exec:
                  command: ["/bin/sh", "-c", "cp /template/settings.json /root/config/settings.json"]

            env:
              TZ: ${TIMEZONE}

            resources:
              limits:
                memory: 512Mi
              requests:
                cpu: 10m

            probes:
              liveness:
                enabled: true
              readiness:
                enabled: true
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 5

    service:
      app:
        controller: *name
        ports:
          http:
            port: 4545

    ingress:
      app:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: traefik.local.${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-with-errors@kubernetescrd
          hajimari.io/icon: mdi:robot-happy-outline
          hajimari.io/info: &description Discord Media Requests
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: *description
          gethomepage.dev/group: Media
          gethomepage.dev/icon: requestrr
          gethomepage.dev/name: Requestrr
          gethomepage.dev/siteMonitor: http://${APP}.media.svc.cluster.local:4545

        hosts:
          - host: &host ${APP}.local.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

        tls: 
         - secretName: ${APP}-tls-production
           hosts:
             - *host

    persistence:

      config:
        enabled: true
        suffix: config
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 128Mi
        retain: false
        globalMounts:
          - path: /root/config
            readOnly: false

      config-file:
        type: secret
        name: requestrr-secret
        globalMounts:
          - path: /template/settings.json
            subPath: settings.json
            readOnly: true