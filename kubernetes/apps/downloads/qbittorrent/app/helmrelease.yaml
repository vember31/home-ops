---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name qbittorrent
  namespace: downloads

spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.6.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s-charts
        namespace: flux-system
      interval: 10m

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace

  test:
    enable: true

  rollback:
    recreate: true
    force: true
    cleanupOnFail: true

  uninstall:
    keepHistory: false
    
  maxHistory: 1

  values:

    controllers:
      ${APP}:
        enabled: true
        type: deployment
        annotations: {}
        labels: {}
        replicas: 1

        # Controller-specific overrides for `defaultPodOptions` keys
        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"

        containers:
          app:
            nameOverride: qbittorrent
            image:
              repository: ghcr.io/onedr0p/qbittorrent
              tag: 5.0.3@sha256:19597e4a5c5e52702ff6b4ea5c4b5f9f42433d6c2f1ef1d2db5964938bf44557
              pullPolicy: IfNotPresent

            # lifecycle:
            #   postStart:
            #     exec:
            #       command: ["/bin/sh", "-c", "cp /config/qBittorrent/qbt_static_config.conf /config/qBittorrent/qBittorrent.conf"]

            env:
              TZ: ${TIMEZONE}
              QBT_WEBUI_PORT: &port 8080

            resources:
              requests:
                cpu: 100m
              limits:
                memory: 4Gi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    service:
      app:
        controller: *name
        ports:
          http:
            port: *port

    ingress:
      app:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: traefik.local.${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.middlewares: networking-secure-networks@kubernetescrd
          hajimari.io/icon: arcticons:qbittorrent-remote
          hajimari.io/info: &description Download Management
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: *description
          gethomepage.dev/group: Downloads
          gethomepage.dev/icon: qbittorrent
          gethomepage.dev/name: qBittorrent
          gethomepage.dev/widget.type: ${APP}
          gethomepage.dev/widget.url: http://${APP}.downloads.svc.cluster.local:8080
          gethomepage.dev/widget.username: "{{ `{{HOMEPAGE_VAR_QBITTORRENT_USERNAME}}` }}"
          gethomepage.dev/widget.password: "{{ `{{HOMEPAGE_VAR_QBITTORRENT_PASSWORD}}` }}"
        hosts:
          - host: &host ${APP}.local.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

        tls: 
         - secretName: ${APP}-tls-production
           hosts:
             - *host

    persistence:

      config:
        enabled: true
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 256Mi
        retain: true
        globalMounts: []

      config-file:
        type: configMap
        name: qbt-configmap
        globalMounts:
          - path: /config/qBittorrent/qbt_static_config.conf
            subPath: qbt_static_config.conf
            readOnly: true

      downloads:
        enabled: true
        type: nfs
        server: ${OMV_IP}
        path: /export/downloads
        globalMounts:
          - path: /media/downloads
      