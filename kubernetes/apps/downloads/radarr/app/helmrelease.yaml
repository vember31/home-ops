---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name radarr
  namespace: downloads

spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace

  test:
    enable: true

  rollback:
    recreate: true
    force: true
    cleanupOnFail: true

  uninstall:
    keepHistory: false
    
  maxHistory: 1

  values:

    controllers:
      ${APP}:
        enabled: true
        type: deployment
        annotations: {}
        labels: {}
        replicas: 1

        # Controller-specific overrides for `defaultPodOptions` keys
        pod:
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: "OnRootMismatch"

        containers:
          app:
            nameOverride: radarr
            image:
              repository: ghcr.io/home-operations/radarr
              tag: 5.27.4.10176@sha256:4b9c3548ff82a9f3e4ccdabb2d7044da8167c42003ac96164c3e1a5287730538
              pullPolicy: IfNotPresent

            env:
              TZ: ${TIMEZONE}
              RADARR__AUTH__METHOD: External
              RADARR__AUTH__REQUIRED: DisabledForLocalAddresses
              RADARR__SERVER__PORT: &port 7878
              RADARR__LOG__DBENABLED: "False"
              RADARR__LOG__LEVEL: info
              RADARR__UPDATE__BRANCH: develop
              RADARR__AUTH__APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: radarr-secret
                    key: RADARR_API_KEY

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 512Mi

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

    service:
      app:
        controller: *name
        ports:
          http:
            port: *port

    ingress:
      app:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: traefik.local.${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-with-errors@kubernetescrd
          hajimari.io/icon: mdi:filmstrip
          hajimari.io/info: &description Movie Collection Management
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: *description
          gethomepage.dev/group: Downloads
          gethomepage.dev/icon: radarr
          gethomepage.dev/name: Radarr
          gethomepage.dev/widget.type: ${APP}
          gethomepage.dev/widget.url: &siteMonitor http://${APP}.downloads.svc.cluster.local:7878
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_RADARR_TOKEN}}` }}"
          gethomepage.dev/widget.enableQueue: "true"
          gethomepage.dev/siteMonitor: *siteMonitor

        hosts:
          - host: &host ${APP}.local.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

        tls: 
         - secretName: ${APP}-tls-production
           hosts:
             - *host

    persistence:

      config:
        enabled: true
        suffix: config
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 2Gi
        retain: false
        globalMounts: []

      media:
        enabled: true
        type: nfs
        server: ${OMV_IP}
        path: /export/media 
        globalMounts:
          - path: /media/
      
      # old hard drive in old server
      movies2:
        enabled: true
        type: nfs
        server: ${OMV2_IP}
        path: /export/movies
        globalMounts:
          - path: /media2/movies
            readOnly: false