---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/refs/heads/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &name pgadmin
  namespace: database

spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  install:
    timeout: 10m
    replace: true
    crds: CreateReplace
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    remediation:
      remediateLastFailure: true
      retries: 3
      strategy: rollback
    cleanupOnFail: true
    crds: CreateReplace

  test:
    enable: true

  rollback:
    recreate: true
    force: true
    cleanupOnFail: true

  uninstall:
    keepHistory: false
    
  maxHistory: 1

  values:

    controllers:
      ${APP}:
        enabled: true
        type: deployment
        annotations:
          reloader.stakater.com/auto: "true"
        replicas: 1

        # Controller-specific overrides for `defaultPodOptions` keys
        pod:
          securityContext:
            runAsUser: 5050
            runAsGroup: 5050
            fsGroup: 5050
            fsGroupChangePolicy: "OnRootMismatch"

        containers:
          app:
            image:
              repository: dpage/pgadmin4
              tag: 9.3@sha256:bd71932cb1ef94719e783f0eed42c227bc67877a7c7e076c7092738711e5f4d4
              pullPolicy: IfNotPresent

            env:
              TZ: ${TIMEZONE}
              PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "False"
              PGADMIN_DISABLE_POSTFIX: "true"
            envFrom:
              - secretRef:
                  name: pgadmin-secret

            resources:
              requests:
                cpu: 50m
                memory: 100Mi
              limits:
                memory: 500Mi

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /misc/ping
                    port: &port 80
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

    service:
      app:
        controller: *name
        ports:
          http:
            port: *port

    ingress:
      app:
        enabled: true
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          external-dns.alpha.kubernetes.io/target: traefik.local.${SECRET_DOMAIN}
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-with-errors@kubernetescrd
          hajimari.io/icon: simple-icons:postgresql
          hajimari.io/info: PostgreSQL Database Administration
          hajimari.io/group: storage
          gethomepage.dev/enabled: "true"
          gethomepage.dev/description: "Postgres GUI Tool"
          gethomepage.dev/group: Storage #don't want to make a separate db group
          gethomepage.dev/icon: postgres
          gethomepage.dev/name: pgAdmin
        hosts:
          - host: &host ${APP}.local.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: app
                  port: http

        tls: 
         - secretName: ${APP}-tls-production
           hosts:
             - *host

    persistence:

      config:
        enabled: true
        type: persistentVolumeClaim
        storageClass: longhorn
        accessMode: ReadWriteOnce
        size: 1Gi
        retain: true
        globalMounts:
          - path: /var/lib/pgadmin

      server-json:
        type: configMap
        name: pgadmin-configmap
        globalMounts:
          - path: /pgadmin4/servers.json
            subPath: servers.json
      